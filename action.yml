name: 'reMarkable-Nuitka-Build-Action'
description: Run nuitka build for the reMarkable tablet
author: Eeems
branding:
  icon: tablet
  color: white
inputs:
  main:
    description: Name of the file to compile relative to the path argument
    required: true
  path:
    description: Folder that contains the source code to compile.
    required: false
    default: ${{ github.workspace }}
  output_dir:
    description: Output directory to use relative to the path argument
    required: false
    default: dist
  mode:
    description: Compilation mode to use
    type: choice
    required: false
    default: onefile
    options:
      - standalone
      - onefile
  lto:
    description: Use link time optimizations
    type: choice
    required: false
    default: auto
    options:
      - 'yes'
      - 'no'
      - auto
  extra_flags:
    description: Extra flags to pass to nuitka
    required: false
    default: |
      --assume-yes-for-downloads
      --warn-implicit-exceptions
      --warn-unusual-code
      --remove-output
      --enable-plugin=pylint-warnings
      --enable-plugin=upx
  run:
    description: Execute immediately after compilation
    type: boolean
    required: false
    default: false
  python_version:
    description: Python version to use
    required: false
    default: '3.11'
    type: choice
    options:
      - '3.11'
      - '3.10'
      - '3.9'
  clean_docker_cache:
    description: Clean the local docker cache before running
    required: false
    type: boolean
    default: false
  ccache_key:
    description: Key used for nuitka ccache
    required: false
runs:
  using: composite
  steps:
    - name: Parse arguments
      id: args
      shell: bash
      run: ./args.sh
      working-directory: ${{ github.action_path }}
      env:
        extra_flags: ${{ inputs.extra_flags }}
        ccache_key: ${{ inputs.ccache_key || ''}}
        default_ccache_key: ${{ github.job }}-remarkable-ccache-${{ inputs.python_version }}-${{ inputs.main }}
        src_path: ${{ inputs.path }}
        main: ${{ inputs.main }}
    - name: Nuitka ccache
      uses: actions/cache@v3
      with:
        path: ${{ inputs.path }}/.nuitka
        key: ${{ steps.args.outputs.ccache_key }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Clean old buildx cache
      if: ${{ inputs.clean_docker_cache == true || inputs.clean_docker_cache == 'true' }}
      shell: bash
      run: |
        docker buildx prune -f
        docker image prune -f
    - name: Build executable
      shell: bash
      run: |
        docker run \
          --rm \
          --platform=linux/arm/v6 \
          -v "${src_path}":/src \
          eeems/nuitka-arm-builder:bullseye-${{ inputs.python_version }} \
          bash -ec "$script" 2>&1 \
        | while read -r line; do
          if [[ "$line" == 'Nuitka'*':ERROR:'* ]]; then
            echo "::error file=${{ steps.args.outputs.main_file }},title=Nuitka Error::$line"
          elif [[ "$line" == 'Nuitka'*':WARNING:'* ]]; then
            echo "::warning file=${{ steps.args.outputs.main_file }},title=Nuitka Warning::$line"
          elif [[ "$line" == 'Nuitka:INFO:'* ]]; then
            echo "$line"
          else
            echo "::debug::$line"
          fi
        done
      env:
        src_path: ${{ inputs.path }}
        script: |
          source /opt/lib/nuitka/bin/activate
          cd /src
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          NUITKA_CACHE_DIR="/src/.nuitka" \
          nuitka3 \
            --verbose \
            --${{ inputs.mode }} \
            --lto=${{ inputs.lto }} \
            --static-libpython=yes \
            --output-dir="/src/${{ inputs.output_dir }}" \
            --main="${{ inputs.main }}" \
            ${{ join(fromJSON(steps.args.outputs.extra_flags), ' ') }}
    - name: Run executable
      if: ${{ inputs.run == true || inputs.run == 'true' }}
      uses: Eeems-Org/run-in-remarkable-action@v1
      with:
        path: ${{ inputs.path }}/${{ inputs.output_dir }}
        fw_version: 2.15.1
        clean_cache: ${{ inputs.clean_docker_cache }}
        run: |
          set -e
          find . -name '*.bin' \
            | xargs -rn1 \
            | while read -r bin; do
              echo "Running $(basename "$bin")"
              "$bin"
            done
